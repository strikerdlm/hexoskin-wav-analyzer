---
description: Tkinter has rules to develop the app for analysis
globs: 
alwaysApply: false
---

**Rule 1: Tkinter Initialization and Theming**

*   **Description:**  This rule governs how the Tkinter application is initialized and sets its overall visual style.  It ensures a consistent and modern appearance across different operating systems.

*   **Key Aspects:**

    *   **Initialization:**  The `Tk()` instance is created, which is the root window of the application.
    *   **Window Title:**  The application window title is set to "Hexoskin WAV File Analyzer - Made by Diego Malpica".
    *   **Default Size:** A default window size of 1200x800 pixels is established.
    *   **Icon:** The application attempts to load an icon (`icon.ico` on Windows, `icon.png` otherwise).  If the icon is not found, the application continues without it.
    *   **Theming:**
        *   A `ttk.Style` object is created for managing the application's visual style.
        *   The `_set_theme()` method attempts to apply a modern theme:
            *   `clam` (if available)
            *   `vista` (on Windows, if available)
            *   `aqua` (on macOS, if available)
        *   If none of these themes are found, it falls back to a default theme.
    *   **Color Configuration:**  The `_get_bg_color()` and `_get_fg_color()` methods retrieve the background and foreground colors, respectively, from the current theme.  This ensures that the application uses colors consistent with the chosen theme.  Fallback colors (`#f0f0f0` for background, `#000000` for foreground) are provided if the theme lookup fails.
    *   **Font Configuration:** Default fonts are set using `self.style.configure` for various widget types (`TLabel`, `TButton`, `TFrame`, `TLabelframe`, `TNotebook.Tab`). Custom styles are created for primary buttons (`Primary.TButton`) and section headers (`Header.TLabel`).
    *   **Centering:** After creating the widgets, the window is centered on the screen.

**Rule 2: Widget Organization and Layout**

*   **Description:** This rule defines how widgets are organized and arranged within the application window, ensuring a user-friendly and responsive layout.

*   **Key Aspects:**

    *   **Main Frame:** A main frame (`ttk.Frame`) with padding is created to hold all other widgets. This provides a consistent margin around the content.
    *   **PanedWindow:** A `ttk.PanedWindow` is used to divide the main frame into two resizable panels: a left panel for controls and a right panel for plots and statistics.  This allows the user to adjust the relative sizes of these sections.
    *   **Left Panel (Controls):**
        *   **Header Frame:** Contains the application title and version number.
        *   **File Operations:**  A `ttk.LabelFrame` groups buttons for loading, saving, and exporting data.  A grid layout is used within this section for precise button placement.
        *   **Loaded Files:** A `ttk.LabelFrame` contains a `tk.Listbox` (with a scrollbar) to display loaded files.  Buttons for comparing, showing statistics, and unloading files are also included.
        *   **Processing:** A `ttk.LabelFrame` groups controls for resampling and filtering data.
        *   **Plot Customization:** A `ttk.LabelFrame` contains widgets for customizing the appearance of the plot (color, line width, time unit, title).
        *   **View Controls:** A `ttk.LabelFrame` provides buttons for zooming, fitting the data to the window, and resetting the view.
        *   **Metadata Display:** A `ttk.LabelFrame` contains a `tk.Text` widget (with a scrollbar) to display file metadata.
    *   **Right Panel (Plots and Stats):**
        *   **Notebook:** A `ttk.Notebook` is used to create tabs for different views: "Plot" and "Comparison".
        *   **Plot Tab:** Contains a Matplotlib figure and canvas for displaying the data plot, along with a toolbar for navigation.
        *   **Comparison Tab:**  Uses a `ttk.PanedWindow` (vertical) to divide the tab into an upper section for controls and a lower section for displaying comparison results. The upper section includes:
            *   Test selection frame.
            *   Comparison plots section with scrollable plot area.
            *   Data preprocessing frame (normalization and alignment).
            *   Selected files listbox.
            *   Run comparison button and progress bar.
        *   The lower section contains a `tk.Text` widget (with scrollbar) for displaying comparison results and an export button.
        *   **About Tab:** Contains information about the application.
    *   **Widget Styling:**  `ttk` widgets are used throughout for a modern look and feel.  Custom styles are applied where needed.
    *   **Responsiveness:**  `pack` and `grid` managers are used with appropriate `fill` and `expand` options to ensure that widgets resize correctly when the window is resized.
    *   **Event Handling:**  Event bindings (e.g., `<<ListboxSelect>>`) are used to trigger actions when the user interacts with widgets.
    *   **Scrollbars:** Scrollbars are added to listboxes and text widgets to handle content that exceeds the visible area.
    *   **Descriptive Naming:**  Widgets are given descriptive variable names (e.g., `load_btn`, `files_listbox`, `plot_ax`) to improve code readability.

